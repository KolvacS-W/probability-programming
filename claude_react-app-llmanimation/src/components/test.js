          // Create a new list: piececode by getting codeText using this.piecemodify elements as codeName from window.currentreuseablesvgpieces
          let piececode = this.modifyobj.piecenames.map(codeName => {
            const piece = currenthighlightedSVGPieceList.find(item => item.codeName === codeName);
            return piece ? piece.codeText : null;
        }).filter(codeText => codeText !== null);

        // Initialize the APIprompt
        let modifyprompt = '';

        // For each element A in piececode and element B in piecemodify, create a prompt
        piececode.forEach((codePiece, index) => {
            const modification = this.modifyobj.pieceprompts[index];
            modifyprompt += `Make modification:` +  modification + ` to svg code piece:` + codePiece+`. `;
        });

        //have params
        if(this.parameters.length >0){
        existingcode = window.cachedobjects[codename].template.templatecode
          APIprompt = `you will be given an svg template code generated by this rule: write me svg code to create a svg image of ` + this.basic_prompt +`. Make the svg image as detailed as possible and as close to the description as possible.  
      Furthermore, process the generated svg code into a svg code template, with the given a list of parameter names, make the returned svg code a template with certain parameters as text placeholders made by {parameter name}. 
      For example, parameter list: roof height, window color; resulting svg template:
      <svg viewBox="0 0 200 200">
      <rect x="50" y="70" width="100" height="80" fill="brown" /> <!-- House body -->
      <polygon points="50,70 100,{roof height} 150,70" fill="red" /> <!-- Roof -->
      <rect x="65" y="90" width="20" height="20" fill="{window color}" /> <!-- Window 1 -->
      <rect x="115" y="90" width="20" height="20" fill="{window color}" /> <!-- Window 2 -->
      <rect x="90" y="120" width="20" height="30" fill="black" /> <!-- Door -->
      </svg>.
      
      Notice that only one parameter name and nothing else can be inside {}. Replace the whole parameter (e.g., fill = "#e0d0c0" to fill = "{parameter name}") instead of just part of it (e.g., fill = "#e0d0c0" to fill = "#{parameter name}"). Return svg code template for this parameter list:` + this.parameters.join(', ')+`. Do not include any background in generated svg. 
      The svg code template must be able to satify the requirements of the parameters by simply replacing the placeholders, instead of other manual modifications (e.g., 'window number' can be modified by simply replacing {window number} to some data, instead of needing to repeat window element manually)
      Make sure donot include anything other than the final svg code template in your response.
      This is the svg template code generated by the above rule: `+ existingcode
    
      +`Now, you are going to make these modifications to the given svg template: `+ modifyprompt +`
      , and make the new svg template have these parameters instead:`+ this.parameters.join(', ')+`. As long as the original svg template follows the new requirements, make as little change as possible other than the specific svg elements mentioned above. Make sure donot include anything other than the svg template code in your response
      `
        }
        //no params
        else{
          APIprompt = 'Modify an existing svg code: '+existingcode+ ', to create a ' + this.basic_prompt +'. Make these modifications on specific svg elements: ' + modifyprompt +'. Do not include any background in generated svg. As long as the svg follows the description, make as little change as possible other than the specific svg elements mentioned above. Make sure donot include anything other than the svg code in your response.';                                
        }
    }